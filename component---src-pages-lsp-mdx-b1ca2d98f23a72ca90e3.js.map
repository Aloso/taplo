{"version":3,"sources":["webpack:///./src/pages/lsp.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"4OAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kIACF,+BAAGC,WAAW,KAAQ,CAChB,KAAQ,4FADd,iCADE,KAIA,qHACA,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,4DAA2C,+BAAGA,WAAW,KAAQ,CAC7D,KAAQ,uCAD+B,aAA3C,aAEoC,0BAAYA,WAAW,KAAvB,2BAFpC,kCAGF,0BAAYA,WAAW,KAAvB,aAHE,yEAIA,iBAAQ,CACN,GAAM,sBADR,sBAGA,qDAAoC,+BAAGA,WAAW,KAAQ,CACtD,KAAQ,6CADwB,UAApC,2GAIA,2GAA0F,kBAAIA,WAAW,KAAf,iBAA1F,yBAA6J,+BAAGA,WAAW,KAAQ,CAC/K,KAAQ,yEADiJ,QAA7J,KAGA,mFAAkE,0BAAYA,WAAW,KAAvB,cAAlE,iCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2MAUL,uKACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,4CAA2B,0BAAYA,WAAW,KAAvB,kBAA3B,oFACA,iBAAQ,CACN,GAAM,0BADR,0BAGA,+GACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,01DAiHTJ,EAAWK,gBAAiB","file":"component---src-pages-lsp-mdx-b1ca2d98f23a72ca90e3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/taplo/taplo/site/src/components/doc-page-layout.tsx\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Most features of the Visual Studio Code extension is powered by a language server that conforms with the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://microsoft.github.io/language-server-protocol/specifications/specification-3-16/\"\n      }}>{`Language Server Protocol 3.16`}</a>{`.`}</p>\n    <p>{`The language server is also intended for public use for integration with other environments.`}</p>\n    <h1 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h1>\n    <h2 {...{\n      \"id\": \"native-binary\"\n    }}>{`Native Binary`}</h2>\n    <p>{`The language server is available on `}<a parentName=\"p\" {...{\n        \"href\": \"https://crates.io/crates/taplo-lsp\"\n      }}>{`crates.io`}</a>{`, running `}<inlineCode parentName=\"p\">{`cargo install taplo-lsp`}</inlineCode>{` will install the server as a\n`}<inlineCode parentName=\"p\">{`taplo-lsp`}</inlineCode>{` command line application, this can be used with TCP or standard i/o.`}</p>\n    <h2 {...{\n      \"id\": \"javascript-package\"\n    }}>{`JavaScript Package`}</h2>\n    <p>{`The server is also available `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@taplo/lsp\"\n      }}>{`on NPM`}</a>{`, opposed to the native binary, this is only a helper library which\nyou can embed in your application.`}</p>\n    <p>{`It exposes an interface for the handlers it needs in order to communicate with the `}<em parentName=\"p\">{`outside world`}</em>{`, an example usage is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tamasfe/taplo/blob/master/js/vscode/src/server.ts\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`It also needs fetch to be available, if run inside NodeJS, `}<inlineCode parentName=\"p\">{`node-fetch`}</inlineCode>{` and some hacks are required:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import fetch, { Headers, Request, Response } from \"node-fetch\";\n\nglobal.Headers = Headers;\nglobal.Request = Request;\nglobal.Response = Response;\nglobal.Window = Object;\nglobal.fetch = fetch;\n`}</code></pre>\n    <p>{`In theory, the server with a subset of the features should be able to be used inside any browser with WebAssembly support, but it is untested.`}</p>\n    <h1 {...{\n      \"id\": \"additional-info\"\n    }}>{`Additional Info`}</h1>\n    <p>{`The server uses the `}<inlineCode parentName=\"p\">{`evenBetterToml`}</inlineCode>{` section for fetching configurations, as this is the extension's name in VSCode.`}</p>\n    <h2 {...{\n      \"id\": \"additional-lsp-methods\"\n    }}>{`Additional LSP Methods`}</h2>\n    <p>{`Taplo also supports additional methods that are not in the official LSP specification:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/**\n * Sent from the client to the server.\n *\n * Convert a TOML text to JSON.\n */\nexport namespace TomlToJson {\n  export interface Params {\n    /**\n     * TOML text\n     */\n    text: string;\n  }\n\n  export interface Response {\n    /**\n     * JSON text\n     */\n    text?: string;\n    errors?: string[];\n  }\n\n  export const METHOD = \"taplo/tomlToJson\";\n}\n\n/**\n * Sent from the client to the server.\n *\n * Convert a JSON text to TOML.\n */\nexport namespace JsonToToml {\n  export interface Params {\n    /**\n     * JSON text\n     */\n    text: string;\n  }\n\n  export interface Response {\n    /**\n     * TOML text\n     */\n    text?: string;\n    error?: string;\n  }\n\n  export const METHOD = \"taplo/jsonToToml\";\n}\n\n/**\n * Sent from the client to the server.\n *\n * Print the syntax tree for a document for debugging.\n */\nexport namespace SyntaxTree {\n  export interface Params {\n    /**\n     * URI of the TOML document,\n     * it must have been opened.\n     */\n    uri: string;\n  }\n\n  export interface Response {\n    /**\n     * The syntax tree.\n     */\n    text: string;\n  }\n\n  export const METHOD = \"taplo/syntaxTree\";\n}\n\n/**\n * Sent from the server to the client.\n *\n * Used for showing a message to the user with\n * a button that navigates to the server's logs.\n */\nexport namespace MessageWithOutput {\n  export const enum MessageKind {\n    Info = \"info\",\n    Warn = \"warn\",\n    Error = \"error\",\n  }\n\n  export interface Params {\n    kind: MessageKind;\n    message: string;\n  }\n\n  export const METHOD = \"taplo/messageWithOutput\";\n}\n\n/**\n * Sent from the client to the server.\n *\n * Set the path the server should use for caching,\n * this is optional.\n */\nexport namespace CachePath {\n  export interface Params {\n    path: string;\n  }\n\n  export const METHOD = \"taplo/cachePath\";\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}