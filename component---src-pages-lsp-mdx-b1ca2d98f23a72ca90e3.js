(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{Ph8p:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return r})),t.d(n,"default",(function(){return p}));var a=t("zLVn"),o=(t("q1tI"),t("7ljp")),s=t("jOii"),r={},i={_frontmatter:r},c=s.a;function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)(c,Object.assign({},i,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Most features of the Visual Studio Code extension is powered by a language server that conforms with the\n",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://microsoft.github.io/language-server-protocol/specifications/specification-3-16/"}),"Language Server Protocol 3.16"),"."),Object(o.b)("p",null,"The language server is also intended for public use for integration with other environments."),Object(o.b)("h1",{id:"usage"},"Usage"),Object(o.b)("h2",{id:"native-binary"},"Native Binary"),Object(o.b)("p",null,"The language server is available on ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://crates.io/crates/taplo-lsp"}),"crates.io"),", running ",Object(o.b)("inlineCode",{parentName:"p"},"cargo install taplo-lsp")," will install the server as a\n",Object(o.b)("inlineCode",{parentName:"p"},"taplo-lsp")," command line application, this can be used with TCP or standard i/o."),Object(o.b)("h2",{id:"javascript-package"},"JavaScript Package"),Object(o.b)("p",null,"The server is also available ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://www.npmjs.com/package/@taplo/lsp"}),"on NPM"),", opposed to the native binary, this is only a helper library which\nyou can embed in your application."),Object(o.b)("p",null,"It exposes an interface for the handlers it needs in order to communicate with the ",Object(o.b)("em",{parentName:"p"},"outside world"),", an example usage is ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/tamasfe/taplo/blob/master/js/vscode/src/server.ts"}),"here"),"."),Object(o.b)("p",null,"It also needs fetch to be available, if run inside NodeJS, ",Object(o.b)("inlineCode",{parentName:"p"},"node-fetch")," and some hacks are required:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),'import fetch, { Headers, Request, Response } from "node-fetch";\n\nglobal.Headers = Headers;\nglobal.Request = Request;\nglobal.Response = Response;\nglobal.Window = Object;\nglobal.fetch = fetch;\n')),Object(o.b)("p",null,"In theory, the server with a subset of the features should be able to be used inside any browser with WebAssembly support, but it is untested."),Object(o.b)("h1",{id:"additional-info"},"Additional Info"),Object(o.b)("p",null,"The server uses the ",Object(o.b)("inlineCode",{parentName:"p"},"evenBetterToml")," section for fetching configurations, as this is the extension's name in VSCode."),Object(o.b)("h2",{id:"additional-lsp-methods"},"Additional LSP Methods"),Object(o.b)("p",null,"Taplo also supports additional methods that are not in the official LSP specification:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),'/**\n * Sent from the client to the server.\n *\n * Convert a TOML text to JSON.\n */\nexport namespace TomlToJson {\n  export interface Params {\n    /**\n     * TOML text\n     */\n    text: string;\n  }\n\n  export interface Response {\n    /**\n     * JSON text\n     */\n    text?: string;\n    errors?: string[];\n  }\n\n  export const METHOD = "taplo/tomlToJson";\n}\n\n/**\n * Sent from the client to the server.\n *\n * Convert a JSON text to TOML.\n */\nexport namespace JsonToToml {\n  export interface Params {\n    /**\n     * JSON text\n     */\n    text: string;\n  }\n\n  export interface Response {\n    /**\n     * TOML text\n     */\n    text?: string;\n    error?: string;\n  }\n\n  export const METHOD = "taplo/jsonToToml";\n}\n\n/**\n * Sent from the client to the server.\n *\n * Print the syntax tree for a document for debugging.\n */\nexport namespace SyntaxTree {\n  export interface Params {\n    /**\n     * URI of the TOML document,\n     * it must have been opened.\n     */\n    uri: string;\n  }\n\n  export interface Response {\n    /**\n     * The syntax tree.\n     */\n    text: string;\n  }\n\n  export const METHOD = "taplo/syntaxTree";\n}\n\n/**\n * Sent from the server to the client.\n *\n * Used for showing a message to the user with\n * a button that navigates to the server\'s logs.\n */\nexport namespace MessageWithOutput {\n  export const enum MessageKind {\n    Info = "info",\n    Warn = "warn",\n    Error = "error",\n  }\n\n  export interface Params {\n    kind: MessageKind;\n    message: string;\n  }\n\n  export const METHOD = "taplo/messageWithOutput";\n}\n\n/**\n * Sent from the client to the server.\n *\n * Set the path the server should use for caching,\n * this is optional.\n */\nexport namespace CachePath {\n  export interface Params {\n    path: string;\n  }\n\n  export const METHOD = "taplo/cachePath";\n}\n')))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-lsp-mdx-b1ca2d98f23a72ca90e3.js.map